
ssi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800120  00800120  000007f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000964  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073e  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000426  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f7  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a8  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  9e:	0c 94 9c 03 	jmp	0x738	; 0x738 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
volatile uint8_t output_flag = 0;   // Флаг для вывода данных

// Инициализация UART
void uart_init()
{
	UBRR0 = F_CPU / 16 / BAUD - 1;
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0);
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  be:	08 95       	ret

000000c0 <uart_send_char>:
}

// Отправка символа через UART
void uart_send_char(char c)
{
	while (!(UCSR0A & (1 << UDRE0)));
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	95 ff       	sbrs	r25, 5
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <uart_send_char+0x4>
	UDR0 = c;
  ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ce:	08 95       	ret

000000d0 <uart_send_string>:
}

// Отправка строки через UART
void uart_send_string(const char* str)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
	while (*str)
  d6:	88 81       	ld	r24, Y
  d8:	88 23       	and	r24, r24
  da:	31 f0       	breq	.+12     	; 0xe8 <uart_send_string+0x18>
  dc:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_send_char(*str++);
  de:	0e 94 60 00 	call	0xc0	; 0xc0 <uart_send_char>
}

// Отправка строки через UART
void uart_send_string(const char* str)
{
	while (*str)
  e2:	89 91       	ld	r24, Y+
  e4:	81 11       	cpse	r24, r1
  e6:	fb cf       	rjmp	.-10     	; 0xde <uart_send_string+0xe>
	{
		uart_send_char(*str++);
	}
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <uart_send_float>:

// Отправка числа с плавающей точкой (в мм)
void uart_send_float(float num)
{
  ee:	4f 92       	push	r4
  f0:	5f 92       	push	r5
  f2:	6f 92       	push	r6
  f4:	7f 92       	push	r7
  f6:	8f 92       	push	r8
  f8:	9f 92       	push	r9
  fa:	af 92       	push	r10
  fc:	bf 92       	push	r11
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	60 97       	sbiw	r28, 0x10	; 16
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	4b 01       	movw	r8, r22
 120:	5c 01       	movw	r10, r24
	int integer_part = (int)num;
 122:	0e 94 43 02 	call	0x486	; 0x486 <__fixsfsi>
 126:	6b 01       	movw	r12, r22
 128:	7c 01       	movw	r14, r24
 12a:	cb 01       	movw	r24, r22
	char buffer[16];
	int i = 0;
	
	if (integer_part == 0)
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	11 f0       	breq	.+4      	; 0x134 <uart_send_float+0x46>
	{
		uart_send_char('0');
	}
	else
	{
		while (integer_part > 0) 
 130:	2c f4       	brge	.+10     	; 0x13c <uart_send_float+0x4e>
 132:	2d c0       	rjmp	.+90     	; 0x18e <uart_send_float+0xa0>
	char buffer[16];
	int i = 0;
	
	if (integer_part == 0)
	{
		uart_send_char('0');
 134:	80 e3       	ldi	r24, 0x30	; 48
 136:	0e 94 60 00 	call	0xc0	; 0xc0 <uart_send_char>
 13a:	29 c0       	rjmp	.+82     	; 0x18e <uart_send_float+0xa0>
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	3c 01       	movw	r6, r24
	}
	else
	{
		while (integer_part > 0) 
 142:	fc 01       	movw	r30, r24
 144:	c6 01       	movw	r24, r12
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
		{
			buffer[i++] = (integer_part % 10) + '0';
 14a:	0f 2e       	mov	r0, r31
 14c:	fa e0       	ldi	r31, 0x0A	; 10
 14e:	4f 2e       	mov	r4, r31
 150:	51 2c       	mov	r5, r1
 152:	f0 2d       	mov	r31, r0
 154:	01 c0       	rjmp	.+2      	; 0x158 <uart_send_float+0x6a>
 156:	89 01       	movw	r16, r18
 158:	98 01       	movw	r18, r16
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	b2 01       	movw	r22, r4
 160:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__divmodhi4>
 164:	80 5d       	subi	r24, 0xD0	; 208
 166:	81 93       	st	Z+, r24
			integer_part /= 10;
 168:	86 2f       	mov	r24, r22
 16a:	97 2f       	mov	r25, r23
	{
		uart_send_char('0');
	}
	else
	{
		while (integer_part > 0) 
 16c:	18 16       	cp	r1, r24
 16e:	19 06       	cpc	r1, r25
 170:	94 f3       	brlt	.-28     	; 0x156 <uart_send_float+0x68>
		{
			buffer[i++] = (integer_part % 10) + '0';
			integer_part /= 10;
		}
		for (int j = i - 1; j >= 0; j--)
 172:	11 23       	and	r17, r17
 174:	64 f0       	brlt	.+24     	; 0x18e <uart_send_float+0xa0>
 176:	0c 0f       	add	r16, r28
 178:	1d 1f       	adc	r17, r29
 17a:	0e 5f       	subi	r16, 0xFE	; 254
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			uart_send_char(buffer[j]);
 17e:	f8 01       	movw	r30, r16
 180:	82 91       	ld	r24, -Z
 182:	8f 01       	movw	r16, r30
 184:	0e 94 60 00 	call	0xc0	; 0xc0 <uart_send_char>
		while (integer_part > 0) 
		{
			buffer[i++] = (integer_part % 10) + '0';
			integer_part /= 10;
		}
		for (int j = i - 1; j >= 0; j--)
 188:	60 16       	cp	r6, r16
 18a:	71 06       	cpc	r7, r17
 18c:	c1 f7       	brne	.-16     	; 0x17e <uart_send_float+0x90>
		{
			uart_send_char(buffer[j]);
		}
	}
	
	uart_send_char('.');
 18e:	8e e2       	ldi	r24, 0x2E	; 46
 190:	0e 94 60 00 	call	0xc0	; 0xc0 <uart_send_char>
	float decimal_part = num - (int)num;
 194:	b6 01       	movw	r22, r12
 196:	dd 0c       	add	r13, r13
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	c5 01       	movw	r24, r10
 1a6:	b4 01       	movw	r22, r8
 1a8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__subsf3>
 1ac:	03 e0       	ldi	r16, 0x03	; 3
 1ae:	10 e0       	ldi	r17, 0x00	; 0
	for (int j = 0; j < 3; j++)
	{
		decimal_part *= 10;
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e2       	ldi	r20, 0x20	; 32
 1b6:	51 e4       	ldi	r21, 0x41	; 65
 1b8:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 1bc:	4b 01       	movw	r8, r22
 1be:	5c 01       	movw	r10, r24
		int digit = (int)decimal_part;
 1c0:	0e 94 43 02 	call	0x486	; 0x486 <__fixsfsi>
 1c4:	6b 01       	movw	r12, r22
 1c6:	7c 01       	movw	r14, r24
		uart_send_char(digit + '0');
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	8c 0d       	add	r24, r12
 1cc:	0e 94 60 00 	call	0xc0	; 0xc0 <uart_send_char>
		decimal_part -= digit;
 1d0:	b6 01       	movw	r22, r12
 1d2:	dd 0c       	add	r13, r13
 1d4:	88 0b       	sbc	r24, r24
 1d6:	99 0b       	sbc	r25, r25
 1d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	c5 01       	movw	r24, r10
 1e2:	b4 01       	movw	r22, r8
 1e4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__subsf3>
 1e8:	01 50       	subi	r16, 0x01	; 1
 1ea:	11 09       	sbc	r17, r1
		}
	}
	
	uart_send_char('.');
	float decimal_part = num - (int)num;
	for (int j = 0; j < 3; j++)
 1ec:	09 f7       	brne	.-62     	; 0x1b0 <uart_send_float+0xc2>
		decimal_part *= 10;
		int digit = (int)decimal_part;
		uart_send_char(digit + '0');
		decimal_part -= digit;
	}
}
 1ee:	60 96       	adiw	r28, 0x10	; 16
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	bf 90       	pop	r11
 20c:	af 90       	pop	r10
 20e:	9f 90       	pop	r9
 210:	8f 90       	pop	r8
 212:	7f 90       	pop	r7
 214:	6f 90       	pop	r6
 216:	5f 90       	pop	r5
 218:	4f 90       	pop	r4
 21a:	08 95       	ret

0000021c <timer1_init>:

// Инициализация Timer1
void timer1_init()
{
	TCCR1A = 0;
 21c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // CTC, предделитель 8
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = 10;                          // 5 мкс
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 22e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1 << OCIE1A);
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0;
 238:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 23c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 240:	08 95       	ret

00000242 <initSSI>:
}

// Инициализация пинов SSI
void initSSI() 
{
	DDRB |= (1 << CLOCK_PIN);   // Clock как выход
 242:	20 9a       	sbi	0x04, 0	; 4
	DDRB &= ~(1 << DATA_PIN);   // Data как вход
 244:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1 << DATA_PIN);   // Подтяжка Data к VCC
 246:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(1 << CLOCK_PIN); // Clock изначально LOW
 248:	28 98       	cbi	0x05, 0	; 5
 24a:	08 95       	ret

0000024c <__vector_11>:
}

// Обработчик прерывания Timer1
ISR(TIMER1_COMPA_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
	if (ssi_state == 0) return;
 25e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ssi_state>
 262:	88 23       	and	r24, r24
 264:	09 f4       	brne	.+2      	; 0x268 <__vector_11+0x1c>
 266:	48 c0       	rjmp	.+144    	; 0x2f8 <__vector_11+0xac>

	if (ssi_bit_count == 0)
 268:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ssi_bit_count>
 26c:	81 11       	cpse	r24, r1
 26e:	02 c0       	rjmp	.+4      	; 0x274 <__vector_11+0x28>
	{
		PORTB &= ~(1 << CLOCK_PIN); // Начальный LOW
 270:	28 98       	cbi	0x05, 0	; 5
 272:	32 c0       	rjmp	.+100    	; 0x2d8 <__vector_11+0x8c>
	}
	else 
	if (ssi_bit_count <= 50)
 274:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ssi_bit_count>
 278:	83 33       	cpi	r24, 0x33	; 51
 27a:	70 f5       	brcc	.+92     	; 0x2d8 <__vector_11+0x8c>
	{
		if (ssi_bit_count % 2 == 1)
 27c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ssi_bit_count>
 280:	80 ff       	sbrs	r24, 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <__vector_11+0x3c>
		{
			PORTB |= (1 << CLOCK_PIN);  // Clock HIGH
 284:	28 9a       	sbi	0x05, 0	; 5
 286:	28 c0       	rjmp	.+80     	; 0x2d8 <__vector_11+0x8c>
		}
		else
		{
			PORTB &= ~(1 << CLOCK_PIN); // Clock LOW
 288:	28 98       	cbi	0x05, 0	; 5
			ssi_data <<= 1;
 28a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <ssi_data>
 28e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <ssi_data+0x1>
 292:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <ssi_data+0x2>
 296:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <ssi_data+0x3>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	aa 1f       	adc	r26, r26
 2a0:	bb 1f       	adc	r27, r27
 2a2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <ssi_data>
 2a6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <ssi_data+0x1>
 2aa:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <ssi_data+0x2>
 2ae:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <ssi_data+0x3>
			if (PINB & (1 << DATA_PIN)) ssi_data |= 1;
 2b2:	19 9b       	sbis	0x03, 1	; 3
 2b4:	11 c0       	rjmp	.+34     	; 0x2d8 <__vector_11+0x8c>
 2b6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <ssi_data>
 2ba:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <ssi_data+0x1>
 2be:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <ssi_data+0x2>
 2c2:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <ssi_data+0x3>
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <ssi_data>
 2cc:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <ssi_data+0x1>
 2d0:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <ssi_data+0x2>
 2d4:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <ssi_data+0x3>
		}
	}

	ssi_bit_count++;
 2d8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ssi_bit_count>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ssi_bit_count>
	if (ssi_bit_count > 50)
 2e2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ssi_bit_count>
 2e6:	83 33       	cpi	r24, 0x33	; 51
 2e8:	38 f0       	brcs	.+14     	; 0x2f8 <__vector_11+0xac>
	{
		ssi_state = 0;
 2ea:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ssi_state>
		ssi_bit_count = 0;
 2ee:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ssi_bit_count>
		output_flag = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	}
}
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <main>:

int main(void) {
	initSSI();
 30a:	0e 94 21 01 	call	0x242	; 0x242 <initSSI>
	uart_init();
 30e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	timer1_init();
 312:	0e 94 0e 01 	call	0x21c	; 0x21c <timer1_init>
	sei();
 316:	78 94       	sei

	uart_send_string("System Started\n"); // Проверка UART
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_send_string>

	uint32_t poll_counter = 0;
 320:	c1 2c       	mov	r12, r1
 322:	d1 2c       	mov	r13, r1
 324:	76 01       	movw	r14, r12

	while (1) 
	{
		if (ssi_state == 0 && poll_counter >= 100000) {
			ssi_data = 0;
			ssi_state = 1;
 326:	c1 e0       	ldi	r28, 0x01	; 1

	uint32_t poll_counter = 0;

	while (1) 
	{
		if (ssi_state == 0 && poll_counter >= 100000) {
 328:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ssi_state>
 32c:	81 11       	cpse	r24, r1
 32e:	15 c0       	rjmp	.+42     	; 0x35a <main+0x50>
 330:	80 ea       	ldi	r24, 0xA0	; 160
 332:	c8 16       	cp	r12, r24
 334:	86 e8       	ldi	r24, 0x86	; 134
 336:	d8 06       	cpc	r13, r24
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	e8 06       	cpc	r14, r24
 33c:	f1 04       	cpc	r15, r1
 33e:	68 f0       	brcs	.+26     	; 0x35a <main+0x50>
			ssi_data = 0;
 340:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ssi_data>
 344:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ssi_data+0x1>
 348:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <ssi_data+0x2>
 34c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <ssi_data+0x3>
			ssi_state = 1;
 350:	c0 93 21 01 	sts	0x0121, r28	; 0x800121 <ssi_state>
			poll_counter = 0;
 354:	c1 2c       	mov	r12, r1
 356:	d1 2c       	mov	r13, r1
 358:	76 01       	movw	r14, r12
			//uart_send_string("Reading SSI\n");
		}
		poll_counter++;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	c8 1a       	sub	r12, r24
 35e:	d8 0a       	sbc	r13, r24
 360:	e8 0a       	sbc	r14, r24
 362:	f8 0a       	sbc	r15, r24

		if (output_flag)
 364:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 368:	88 23       	and	r24, r24
 36a:	f1 f2       	breq	.-68     	; 0x328 <main+0x1e>
		{
			float position_mm = (ssi_data & 0xFFFFFF) * 0.005; // 5 мкм = 0.005 мм
 36c:	80 90 23 01 	lds	r8, 0x0123	; 0x800123 <ssi_data>
 370:	90 90 24 01 	lds	r9, 0x0124	; 0x800124 <ssi_data+0x1>
 374:	a0 90 25 01 	lds	r10, 0x0125	; 0x800125 <ssi_data+0x2>
 378:	b0 90 26 01 	lds	r11, 0x0126	; 0x800126 <ssi_data+0x3>
			uart_send_string("Position: ");
 37c:	80 e1       	ldi	r24, 0x10	; 16
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_send_string>
			uart_send_float(position_mm);
 384:	c5 01       	movw	r24, r10
 386:	b4 01       	movw	r22, r8
 388:	99 27       	eor	r25, r25
 38a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__floatunsisf>
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	37 ed       	ldi	r19, 0xD7	; 215
 392:	43 ea       	ldi	r20, 0xA3	; 163
 394:	5b e3       	ldi	r21, 0x3B	; 59
 396:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
 39a:	0e 94 77 00 	call	0xee	; 0xee <uart_send_float>
			uart_send_string(" mm\n");
 39e:	8b e1       	ldi	r24, 0x1B	; 27
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_send_string>
			output_flag = 0;
 3a6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 3aa:	be cf       	rjmp	.-132    	; 0x328 <main+0x1e>

000003ac <__subsf3>:
 3ac:	50 58       	subi	r21, 0x80	; 128

000003ae <__addsf3>:
 3ae:	bb 27       	eor	r27, r27
 3b0:	aa 27       	eor	r26, r26
 3b2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__addsf3x>
 3b6:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 3ba:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 3be:	38 f0       	brcs	.+14     	; 0x3ce <__addsf3+0x20>
 3c0:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 3c4:	20 f0       	brcs	.+8      	; 0x3ce <__addsf3+0x20>
 3c6:	39 f4       	brne	.+14     	; 0x3d6 <__addsf3+0x28>
 3c8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ca:	19 f4       	brne	.+6      	; 0x3d2 <__addsf3+0x24>
 3cc:	26 f4       	brtc	.+8      	; 0x3d6 <__addsf3+0x28>
 3ce:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>
 3d2:	0e f4       	brtc	.+2      	; 0x3d6 <__addsf3+0x28>
 3d4:	e0 95       	com	r30
 3d6:	e7 fb       	bst	r30, 7
 3d8:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>

000003dc <__addsf3x>:
 3dc:	e9 2f       	mov	r30, r25
 3de:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 3e2:	58 f3       	brcs	.-42     	; 0x3ba <__addsf3+0xc>
 3e4:	ba 17       	cp	r27, r26
 3e6:	62 07       	cpc	r22, r18
 3e8:	73 07       	cpc	r23, r19
 3ea:	84 07       	cpc	r24, r20
 3ec:	95 07       	cpc	r25, r21
 3ee:	20 f0       	brcs	.+8      	; 0x3f8 <__addsf3x+0x1c>
 3f0:	79 f4       	brne	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f2:	a6 f5       	brtc	.+104    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 3f4:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_zero>
 3f8:	0e f4       	brtc	.+2      	; 0x3fc <__addsf3x+0x20>
 3fa:	e0 95       	com	r30
 3fc:	0b 2e       	mov	r0, r27
 3fe:	ba 2f       	mov	r27, r26
 400:	a0 2d       	mov	r26, r0
 402:	0b 01       	movw	r0, r22
 404:	b9 01       	movw	r22, r18
 406:	90 01       	movw	r18, r0
 408:	0c 01       	movw	r0, r24
 40a:	ca 01       	movw	r24, r20
 40c:	a0 01       	movw	r20, r0
 40e:	11 24       	eor	r1, r1
 410:	ff 27       	eor	r31, r31
 412:	59 1b       	sub	r21, r25
 414:	99 f0       	breq	.+38     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 416:	59 3f       	cpi	r21, 0xF9	; 249
 418:	50 f4       	brcc	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 41a:	50 3e       	cpi	r21, 0xE0	; 224
 41c:	68 f1       	brcs	.+90     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 41e:	1a 16       	cp	r1, r26
 420:	f0 40       	sbci	r31, 0x00	; 0
 422:	a2 2f       	mov	r26, r18
 424:	23 2f       	mov	r18, r19
 426:	34 2f       	mov	r19, r20
 428:	44 27       	eor	r20, r20
 42a:	58 5f       	subi	r21, 0xF8	; 248
 42c:	f3 cf       	rjmp	.-26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 42e:	46 95       	lsr	r20
 430:	37 95       	ror	r19
 432:	27 95       	ror	r18
 434:	a7 95       	ror	r26
 436:	f0 40       	sbci	r31, 0x00	; 0
 438:	53 95       	inc	r21
 43a:	c9 f7       	brne	.-14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 43c:	7e f4       	brtc	.+30     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 43e:	1f 16       	cp	r1, r31
 440:	ba 0b       	sbc	r27, r26
 442:	62 0b       	sbc	r22, r18
 444:	73 0b       	sbc	r23, r19
 446:	84 0b       	sbc	r24, r20
 448:	ba f0       	brmi	.+46     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 44a:	91 50       	subi	r25, 0x01	; 1
 44c:	a1 f0       	breq	.+40     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 44e:	ff 0f       	add	r31, r31
 450:	bb 1f       	adc	r27, r27
 452:	66 1f       	adc	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	c2 f7       	brpl	.-16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 45a:	0e c0       	rjmp	.+28     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45c:	ba 0f       	add	r27, r26
 45e:	62 1f       	adc	r22, r18
 460:	73 1f       	adc	r23, r19
 462:	84 1f       	adc	r24, r20
 464:	48 f4       	brcc	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 466:	87 95       	ror	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b7 95       	ror	r27
 46e:	f7 95       	ror	r31
 470:	9e 3f       	cpi	r25, 0xFE	; 254
 472:	08 f0       	brcs	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 474:	b0 cf       	rjmp	.-160    	; 0x3d6 <__addsf3+0x28>
 476:	93 95       	inc	r25
 478:	88 0f       	add	r24, r24
 47a:	08 f0       	brcs	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	99 27       	eor	r25, r25
 47e:	ee 0f       	add	r30, r30
 480:	97 95       	ror	r25
 482:	87 95       	ror	r24
 484:	08 95       	ret

00000486 <__fixsfsi>:
 486:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
 48a:	68 94       	set
 48c:	b1 11       	cpse	r27, r1
 48e:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 492:	08 95       	ret

00000494 <__fixunssfsi>:
 494:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_splitA>
 498:	88 f0       	brcs	.+34     	; 0x4bc <__fixunssfsi+0x28>
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	98 f0       	brcs	.+38     	; 0x4c4 <__fixunssfsi+0x30>
 49e:	b9 2f       	mov	r27, r25
 4a0:	99 27       	eor	r25, r25
 4a2:	b7 51       	subi	r27, 0x17	; 23
 4a4:	b0 f0       	brcs	.+44     	; 0x4d2 <__fixunssfsi+0x3e>
 4a6:	e1 f0       	breq	.+56     	; 0x4e0 <__fixunssfsi+0x4c>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a f0       	brmi	.+6      	; 0x4b8 <__fixunssfsi+0x24>
 4b2:	ba 95       	dec	r27
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__fixunssfsi+0x14>
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <__fixunssfsi+0x4c>
 4b8:	b1 30       	cpi	r27, 0x01	; 1
 4ba:	91 f0       	breq	.+36     	; 0x4e0 <__fixunssfsi+0x4c>
 4bc:	0e 94 00 03 	call	0x600	; 0x600 <__fp_zero>
 4c0:	b1 e0       	ldi	r27, 0x01	; 1
 4c2:	08 95       	ret
 4c4:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_zero>
 4c8:	67 2f       	mov	r22, r23
 4ca:	78 2f       	mov	r23, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	b8 5f       	subi	r27, 0xF8	; 248
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__fixunssfsi+0x4c>
 4d2:	b9 3f       	cpi	r27, 0xF9	; 249
 4d4:	cc f3       	brlt	.-14     	; 0x4c8 <__fixunssfsi+0x34>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b3 95       	inc	r27
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__fixunssfsi+0x42>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__fixunssfsi+0x5c>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__floatunsisf>:
 4f2:	e8 94       	clt
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__floatsisf+0x12>

000004f6 <__floatsisf>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__floatsisf+0x12>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	99 23       	and	r25, r25
 50a:	a9 f0       	breq	.+42     	; 0x536 <__floatsisf+0x40>
 50c:	f9 2f       	mov	r31, r25
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	bb 27       	eor	r27, r27
 512:	93 95       	inc	r25
 514:	f6 95       	lsr	r31
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f1 11       	cpse	r31, r1
 520:	f8 cf       	rjmp	.-16     	; 0x512 <__floatsisf+0x1c>
 522:	fa f4       	brpl	.+62     	; 0x562 <__floatsisf+0x6c>
 524:	bb 0f       	add	r27, r27
 526:	11 f4       	brne	.+4      	; 0x52c <__floatsisf+0x36>
 528:	60 ff       	sbrs	r22, 0
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__floatsisf+0x6c>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	16 c0       	rjmp	.+44     	; 0x562 <__floatsisf+0x6c>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <__floatsisf+0x48>
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__floatsisf+0x6a>
 53e:	77 23       	and	r23, r23
 540:	21 f0       	breq	.+8      	; 0x54a <__floatsisf+0x54>
 542:	9e e8       	ldi	r25, 0x8E	; 142
 544:	87 2f       	mov	r24, r23
 546:	76 2f       	mov	r23, r22
 548:	05 c0       	rjmp	.+10     	; 0x554 <__floatsisf+0x5e>
 54a:	66 23       	and	r22, r22
 54c:	71 f0       	breq	.+28     	; 0x56a <__floatsisf+0x74>
 54e:	96 e8       	ldi	r25, 0x86	; 134
 550:	86 2f       	mov	r24, r22
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	2a f0       	brmi	.+10     	; 0x562 <__floatsisf+0x6c>
 558:	9a 95       	dec	r25
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	da f7       	brpl	.-10     	; 0x558 <__floatsisf+0x62>
 562:	88 0f       	add	r24, r24
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_inf>:
 56c:	97 f9       	bld	r25, 7
 56e:	9f 67       	ori	r25, 0x7F	; 127
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	08 95       	ret

00000578 <__fp_nan>:
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	80 ec       	ldi	r24, 0xC0	; 192
 57c:	08 95       	ret

0000057e <__fp_pscA>:
 57e:	00 24       	eor	r0, r0
 580:	0a 94       	dec	r0
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	18 06       	cpc	r1, r24
 588:	09 06       	cpc	r0, r25
 58a:	08 95       	ret

0000058c <__fp_pscB>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	12 16       	cp	r1, r18
 592:	13 06       	cpc	r1, r19
 594:	14 06       	cpc	r1, r20
 596:	05 06       	cpc	r0, r21
 598:	08 95       	ret

0000059a <__fp_round>:
 59a:	09 2e       	mov	r0, r25
 59c:	03 94       	inc	r0
 59e:	00 0c       	add	r0, r0
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0xc>
 5a2:	88 23       	and	r24, r24
 5a4:	52 f0       	brmi	.+20     	; 0x5ba <__fp_round+0x20>
 5a6:	bb 0f       	add	r27, r27
 5a8:	40 f4       	brcc	.+16     	; 0x5ba <__fp_round+0x20>
 5aa:	bf 2b       	or	r27, r31
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__fp_round+0x18>
 5ae:	60 ff       	sbrs	r22, 0
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <__fp_round+0x20>
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__fp_split3>:
 5bc:	57 fd       	sbrc	r21, 7
 5be:	90 58       	subi	r25, 0x80	; 128
 5c0:	44 0f       	add	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	59 f0       	breq	.+22     	; 0x5dc <__fp_splitA+0x10>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <__fp_splitA+0x1a>
 5ca:	47 95       	ror	r20

000005cc <__fp_splitA>:
 5cc:	88 0f       	add	r24, r24
 5ce:	97 fb       	bst	r25, 7
 5d0:	99 1f       	adc	r25, r25
 5d2:	61 f0       	breq	.+24     	; 0x5ec <__fp_splitA+0x20>
 5d4:	9f 3f       	cpi	r25, 0xFF	; 255
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <__fp_splitA+0x2a>
 5d8:	87 95       	ror	r24
 5da:	08 95       	ret
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	f2 cf       	rjmp	.-28     	; 0x5ca <__fp_split3+0xe>
 5e6:	46 95       	lsr	r20
 5e8:	f1 df       	rcall	.-30     	; 0x5cc <__fp_splitA>
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <__fp_splitA+0x30>
 5ec:	16 16       	cp	r1, r22
 5ee:	17 06       	cpc	r1, r23
 5f0:	18 06       	cpc	r1, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	f1 cf       	rjmp	.-30     	; 0x5d8 <__fp_splitA+0xc>
 5f6:	86 95       	lsr	r24
 5f8:	71 05       	cpc	r23, r1
 5fa:	61 05       	cpc	r22, r1
 5fc:	08 94       	sec
 5fe:	08 95       	ret

00000600 <__fp_zero>:
 600:	e8 94       	clt

00000602 <__fp_szero>:
 602:	bb 27       	eor	r27, r27
 604:	66 27       	eor	r22, r22
 606:	77 27       	eor	r23, r23
 608:	cb 01       	movw	r24, r22
 60a:	97 f9       	bld	r25, 7
 60c:	08 95       	ret

0000060e <__mulsf3>:
 60e:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3x>
 612:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 616:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 61a:	38 f0       	brcs	.+14     	; 0x62a <__mulsf3+0x1c>
 61c:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 620:	20 f0       	brcs	.+8      	; 0x62a <__mulsf3+0x1c>
 622:	95 23       	and	r25, r21
 624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1c>
 626:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 62a:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>
 62e:	11 24       	eor	r1, r1
 630:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>

00000634 <__mulsf3x>:
 634:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 638:	70 f3       	brcs	.-36     	; 0x616 <__mulsf3+0x8>

0000063a <__mulsf3_pse>:
 63a:	95 9f       	mul	r25, r21
 63c:	c1 f3       	breq	.-16     	; 0x62e <__mulsf3+0x20>
 63e:	95 0f       	add	r25, r21
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	55 1f       	adc	r21, r21
 644:	62 9f       	mul	r22, r18
 646:	f0 01       	movw	r30, r0
 648:	72 9f       	mul	r23, r18
 64a:	bb 27       	eor	r27, r27
 64c:	f0 0d       	add	r31, r0
 64e:	b1 1d       	adc	r27, r1
 650:	63 9f       	mul	r22, r19
 652:	aa 27       	eor	r26, r26
 654:	f0 0d       	add	r31, r0
 656:	b1 1d       	adc	r27, r1
 658:	aa 1f       	adc	r26, r26
 65a:	64 9f       	mul	r22, r20
 65c:	66 27       	eor	r22, r22
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	66 1f       	adc	r22, r22
 664:	82 9f       	mul	r24, r18
 666:	22 27       	eor	r18, r18
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	62 1f       	adc	r22, r18
 66e:	73 9f       	mul	r23, r19
 670:	b0 0d       	add	r27, r0
 672:	a1 1d       	adc	r26, r1
 674:	62 1f       	adc	r22, r18
 676:	83 9f       	mul	r24, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	22 1f       	adc	r18, r18
 67e:	74 9f       	mul	r23, r20
 680:	33 27       	eor	r19, r19
 682:	a0 0d       	add	r26, r0
 684:	61 1d       	adc	r22, r1
 686:	23 1f       	adc	r18, r19
 688:	84 9f       	mul	r24, r20
 68a:	60 0d       	add	r22, r0
 68c:	21 1d       	adc	r18, r1
 68e:	82 2f       	mov	r24, r18
 690:	76 2f       	mov	r23, r22
 692:	6a 2f       	mov	r22, r26
 694:	11 24       	eor	r1, r1
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	50 40       	sbci	r21, 0x00	; 0
 69a:	9a f0       	brmi	.+38     	; 0x6c2 <__mulsf3_pse+0x88>
 69c:	f1 f0       	breq	.+60     	; 0x6da <__mulsf3_pse+0xa0>
 69e:	88 23       	and	r24, r24
 6a0:	4a f0       	brmi	.+18     	; 0x6b4 <__mulsf3_pse+0x7a>
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	91 50       	subi	r25, 0x01	; 1
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	a9 f7       	brne	.-22     	; 0x69e <__mulsf3_pse+0x64>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	80 f0       	brcs	.+32     	; 0x6da <__mulsf3_pse+0xa0>
 6ba:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 6be:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	e4 f3       	brlt	.-8      	; 0x6be <__mulsf3_pse+0x84>
 6c6:	98 3e       	cpi	r25, 0xE8	; 232
 6c8:	d4 f3       	brlt	.-12     	; 0x6be <__mulsf3_pse+0x84>
 6ca:	86 95       	lsr	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b7 95       	ror	r27
 6d2:	f7 95       	ror	r31
 6d4:	e7 95       	ror	r30
 6d6:	9f 5f       	subi	r25, 0xFF	; 255
 6d8:	c1 f7       	brne	.-16     	; 0x6ca <__mulsf3_pse+0x90>
 6da:	fe 2b       	or	r31, r30
 6dc:	88 0f       	add	r24, r24
 6de:	91 1d       	adc	r25, r1
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__divmodhi4>:
 6e8:	97 fb       	bst	r25, 7
 6ea:	07 2e       	mov	r0, r23
 6ec:	16 f4       	brtc	.+4      	; 0x6f2 <__divmodhi4+0xa>
 6ee:	00 94       	com	r0
 6f0:	07 d0       	rcall	.+14     	; 0x700 <__divmodhi4_neg1>
 6f2:	77 fd       	sbrc	r23, 7
 6f4:	09 d0       	rcall	.+18     	; 0x708 <__divmodhi4_neg2>
 6f6:	0e 94 88 03 	call	0x710	; 0x710 <__udivmodhi4>
 6fa:	07 fc       	sbrc	r0, 7
 6fc:	05 d0       	rcall	.+10     	; 0x708 <__divmodhi4_neg2>
 6fe:	3e f4       	brtc	.+14     	; 0x70e <__divmodhi4_exit>

00000700 <__divmodhi4_neg1>:
 700:	90 95       	com	r25
 702:	81 95       	neg	r24
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	08 95       	ret

00000708 <__divmodhi4_neg2>:
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255

0000070e <__divmodhi4_exit>:
 70e:	08 95       	ret

00000710 <__udivmodhi4>:
 710:	aa 1b       	sub	r26, r26
 712:	bb 1b       	sub	r27, r27
 714:	51 e1       	ldi	r21, 0x11	; 17
 716:	07 c0       	rjmp	.+14     	; 0x726 <__udivmodhi4_ep>

00000718 <__udivmodhi4_loop>:
 718:	aa 1f       	adc	r26, r26
 71a:	bb 1f       	adc	r27, r27
 71c:	a6 17       	cp	r26, r22
 71e:	b7 07       	cpc	r27, r23
 720:	10 f0       	brcs	.+4      	; 0x726 <__udivmodhi4_ep>
 722:	a6 1b       	sub	r26, r22
 724:	b7 0b       	sbc	r27, r23

00000726 <__udivmodhi4_ep>:
 726:	88 1f       	adc	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	5a 95       	dec	r21
 72c:	a9 f7       	brne	.-22     	; 0x718 <__udivmodhi4_loop>
 72e:	80 95       	com	r24
 730:	90 95       	com	r25
 732:	bc 01       	movw	r22, r24
 734:	cd 01       	movw	r24, r26
 736:	08 95       	ret

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
